/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MultisigInterface extends ethers.utils.Interface {
  functions: {
    "addSigner(address,uint256)": FunctionFragment;
    "executeTransaction(bytes[],address,uint256,bytes)": FunctionFragment;
    "getSignerCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverSigner(address,uint256,bytes,bytes)": FunctionFragment;
    "removeSigner(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replaceSigner(address,address)": FunctionFragment;
    "signers(uint256)": FunctionFragment;
    "threshold()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "typedDataHash((address,uint256,bytes))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSigner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BytesLike[], string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceSigner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "typedDataHash",
    values: [{ to: string; value: BigNumberish; data: BytesLike }]
  ): string;

  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typedDataHash",
    data: BytesLike
  ): Result;

  events: {
    "AddSigner(address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "Execution(address,bool,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveSigner(address)": EventFragment;
    "ReplaceSigner(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSigner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReplaceSigner"): EventFragment;
}

export type AddSignerEvent = TypedEvent<
  [string, BigNumber] & { signer: string; threshold: BigNumber }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    amount: BigNumber;
    balance: BigNumber;
  }
>;

export type ExecutionEvent = TypedEvent<
  [string, boolean, string] & {
    destination: string;
    success: boolean;
    returndata: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveSignerEvent = TypedEvent<[string] & { signer: string }>;

export type ReplaceSignerEvent = TypedEvent<
  [string, string] & { signer: string; newSigner: string }
>;

export class Multisig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultisigInterface;

  functions: {
    addSigner(
      _signer: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      signatures: BytesLike[],
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSignerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverSigner(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      userSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    replaceSigner(
      _signer: string,
      _newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    threshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    typedDataHash(
      params: { to: string; value: BigNumberish; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addSigner(
    _signer: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    signatures: BytesLike[],
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSignerCount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverSigner(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    userSignature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  removeSigner(
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  replaceSigner(
    _signer: string,
    _newSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  threshold(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  typedDataHash(
    params: { to: string; value: BigNumberish; data: BytesLike },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addSigner(
      _signer: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      signatures: BytesLike[],
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getSignerCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverSigner(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      userSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeSigner(_signer: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replaceSigner(
      _signer: string,
      _newSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    typedDataHash(
      params: { to: string; value: BigNumberish; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AddSigner(address,uint256)"(
      signer?: string | null,
      threshold?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { signer: string; threshold: BigNumber }
    >;

    AddSigner(
      signer?: string | null,
      threshold?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { signer: string; threshold: BigNumber }
    >;

    "Deposit(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; balance: BigNumber }
    >;

    Deposit(
      sender?: string | null,
      amount?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; amount: BigNumber; balance: BigNumber }
    >;

    "Execution(address,bool,bytes)"(
      destination?: null,
      success?: null,
      returndata?: null
    ): TypedEventFilter<
      [string, boolean, string],
      { destination: string; success: boolean; returndata: string }
    >;

    Execution(
      destination?: null,
      success?: null,
      returndata?: null
    ): TypedEventFilter<
      [string, boolean, string],
      { destination: string; success: boolean; returndata: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemoveSigner(address)"(
      signer?: string | null
    ): TypedEventFilter<[string], { signer: string }>;

    RemoveSigner(
      signer?: string | null
    ): TypedEventFilter<[string], { signer: string }>;

    "ReplaceSigner(address,address)"(
      signer?: string | null,
      newSigner?: string | null
    ): TypedEventFilter<
      [string, string],
      { signer: string; newSigner: string }
    >;

    ReplaceSigner(
      signer?: string | null,
      newSigner?: string | null
    ): TypedEventFilter<
      [string, string],
      { signer: string; newSigner: string }
    >;
  };

  estimateGas: {
    addSigner(
      _signer: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      signatures: BytesLike[],
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSignerCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverSigner(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      userSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    replaceSigner(
      _signer: string,
      _newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    threshold(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    typedDataHash(
      params: { to: string; value: BigNumberish; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSigner(
      _signer: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      signatures: BytesLike[],
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSignerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverSigner(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      userSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSigner(
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    replaceSigner(
      _signer: string,
      _newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    threshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    typedDataHash(
      params: { to: string; value: BigNumberish; data: BytesLike },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
